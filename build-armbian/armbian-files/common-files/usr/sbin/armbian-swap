#!/bin/bash
#===========================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Rebuild Armbian
# https://github.com/ophub/amlogic-s9xxx-armbian
#
# Function: Create swap for armbian system
# Copyright (C) 2021- https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021- https://github.com/ophub/amlogic-s9xxx-armbian
#
# Command: armbian-swap 1
# The input parameter unit is GiB, the default is 1
#
#=========================================================================
#
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
OPTIONS="[\033[93m OPTIONS \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"

# Encountered a serious error, abort the script execution
error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

# Check disk
do_checkdisk() {
    # Find the partition where root is located
    ROOT_PTNAME=$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print $3}')
    if [[ -z "${ROOT_PTNAME}" ]]; then
        error_msg "Cannot find the partition corresponding to the root file system!"
    fi

    # Find the disk where the partition is located, only supports mmcblk?p? sd?? hd?? vd?? and other formats
    case "${ROOT_PTNAME}" in
    mmcblk?p[1-4])
        DISK_NAME="${ROOT_PTNAME:0:-2}"
        PARTITION_NAME="p"
        ;;
    [hsv]d[a-z][1-4])
        DISK_NAME="${ROOT_PTNAME:0:-1}"
        PARTITION_NAME=""
        ;;
    nvme?n?p[1-4])
        DISK_NAME="${ROOT_PTNAME:0:-2}"
        PARTITION_NAME="p"
        ;;
    *)
        error_msg "Unable to recognize the disk type of ${ROOT_PTNAME}!"
        ;;
    esac

    # Find out if the extended partition is created using the armbian-TF command in TF/USB
    find_right_path="/mnt/${DISK_NAME}${PARTITION_NAME}3"
    if [[ -d "${find_right_path}" ]]; then
        PARTITION_PATH="${find_right_path}"
    else
        PARTITION_PATH="/mnt"
    fi

    # Check if there is enough free space
    available_space="$(df -Tk ${PARTITION_PATH} | grep '/dev/' | awk '{print $5}' | echo $(($(xargs) / 1024 / 1024)))"
    if [[ -z "$(echo "${available_space}" | sed -n "/^[0-9]\+$/p")" ]]; then
        error_msg "The path is not available, the remaining space cannot be obtained."
    fi
    if [[ "${available_space}" -lt "${swap_gb}" ]]; then
        error_msg "The remaining space is [ ${available_space} ] GiB, and [ ${swap_gb} ] GiB swap cannot be created."
    fi

    # Check directory
    SWAP_PATH="${PARTITION_PATH}/.swap"
    mkdir -p ${SWAP_PATH} && sync
    echo -e "${INFO} Prepare to create [ ${swap_gb} ] GiB swap in the [ ${SWAP_PATH} ] directory."
}

# delete current swap
delete_current_swap() {
    echo -e "${STEPS} Current swap size is: [ ${1} ] bytes, start to delete..."
    current_swap_file="$(cat /proc/swaps | sed -n '$p' | awk '{print $1}' | echo $(xargs))"
    swapoff ${current_swap_file} 2>/dev/null && sync
    rm -f ${current_swap_file} 2>/dev/null && sync
    echo -e "${SUCCESS} Delete successfully!"
}

# create new swap
create_the_swap() {
    echo -e "${STEPS} Start creating a new swap..."
    ROOTFS_TYPE="$(df -hT ${SWAP_PATH} | tail -n1 | awk '{print $2}')"
    echo -e "${INFO} The swap size is [ ${swap_gb} ] GiB, partition types is [ ${ROOTFS_TYPE} ], Please wait..."

    # create swapfile
    [[ "${ROOTFS_TYPE}" == "btrfs" ]] && {
        truncate -s 0 ${SWAP_PATH}/swapfile
        [[ "${?}" -ne "0" ]] && error_msg "[ truncate ] operation failed."
        chattr +C ${SWAP_PATH}/swapfile
        btrfs property set ${SWAP_PATH}/swapfile compression none
    }
    dd if="/dev/zero" of="${SWAP_PATH}/swapfile" bs="1024" count="$((1048576 * ${swap_gb}))" conv="fsync"
    [[ "${?}" -ne "0" ]] && error_msg "Failed to write [ ${SWAP_PATH}/swapfile ] using dd."
    chmod 600 ${SWAP_PATH}/swapfile
    mkswap -L SWAP ${SWAP_PATH}/swapfile
    [[ "${?}" -ne "0" ]] && error_msg "[ mkswap ] operation failed."
    swapon ${SWAP_PATH}/swapfile
    [[ "${?}" -ne "0" ]] && error_msg "[ swapon ] operation failed."

    # Add swap to the mount point
    sed -i '/swap/d' /etc/fstab
    echo "${SWAP_PATH}/swapfile swap swap defaults 0 0" >>/etc/fstab

    # Zram swap set to disabled
    zram_config="/etc/default/armbian-zram-config"
    [[ -f "${zram_config}" ]] && sed -i "s|# SWAP=false|SWAP=false|g" ${zram_config}

    sync && sleep 3
    echo -e "${INFO} Current swap: \n$(cat /proc/swaps)"
    echo -e "${SUCCESS} Created successfully!"
}

# Check swap
do_checkswap() {
    # Set the swap size in GiB
    my_swap_gb="${1}"
    format_gb="$(echo "${my_swap_gb}" | awk -F "." '{print $1}')"
    if [[ -n "$(echo "${format_gb}" | sed -n "/^[0-9]\+$/p")" ]]; then
        swap_gb="${format_gb}"
    else
        swap_gb="1"
    fi

    # Check disk
    do_checkdisk

    # manage swap
    current_swap="$(free -m | sed -n '$p' | awk '{print $2}' | echo $(xargs))"
    if [[ "${current_swap}" -ne "0" ]]; then
        delete_current_swap ${current_swap}
        create_the_swap ${swap_gb}
    else
        create_the_swap ${swap_gb}
    fi
    exit 0
}

echo -e "${STEPS} Welcome to use swap management tool."
# Check script permission
[[ "$(id -u)" == "0" ]] || error_msg "please run this script as root: [ sudo $0 ]"
# Check swap
do_checkswap "${@}"
