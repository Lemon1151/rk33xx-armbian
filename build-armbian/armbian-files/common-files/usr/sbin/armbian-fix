#!/bin/bash
#======================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Rebuild Armbian
# https://github.com/ophub/amlogic-s9xxx-armbian
#
# Dependent script: /usr/lib/armbian/armbian-firstrun
# Function: Fix permissions and related settings(Executed at system initialization)
# Copyright (C) 2021- https://github.com/ophub/amlogic-s9xxx-armbian
#
# Command: armbian-fix
#
#=============================== Set default parameters ===============================
#
# Set the armbian release check file
armbian_release_file="/etc/armbian-release"
armbian_image_file="/etc/armbian-image-release"
armbian_os_status="/etc/armbian-distribution-status"
# Set the Lemon1151 release check file
Lemon1151_release_file="/etc/Lemon1151-release"
# Custom armbian-fix Log
fix_log="/tmp/armbian-fix.log"
#
#======================================================================================

# Add log
tolog() {
    echo -e "${1}"
    echo -e "[$(date +"%Y.%m.%d.%H:%M:%S")] ${1}" >>${fix_log}
}

# Show start message
echo "" >${fix_log} && tolog "Start fixing..."

# Get the system release version, such as: jammy, noble, bookworm, bullseye, etc.
[[ -f "/etc/lsb-release" ]] && DISTRIBUTION_CODENAME="$(grep CODENAME /etc/lsb-release | cut -d'=' -f2)"
[[ -z "${DISTRIBUTION_CODENAME}" && -f "/etc/os-release" ]] && DISTRIBUTION_CODENAME="$(grep VERSION_CODENAME /etc/os-release | cut -d'=' -f2)"
[[ -z "${DISTRIBUTION_CODENAME}" && -x "/usr/bin/lsb_release" ]] && DISTRIBUTION_CODENAME="$(/usr/bin/lsb_release -c | cut -d':' -f2 | tr -d '\t')"

# ===== A. Start repairing system permissions =====

# Fix common releases permissions
[[ -d "/var/tmp" ]] && sudo chmod 777 /var/tmp && tolog "01. Fix tmp permissions"
[[ -d "/etc/update-motd.d" ]] && sudo chmod -x /etc/update-motd.d/* && sudo chmod +x /etc/update-motd.d/{10-*,30-*} 2>/dev/null && tolog "02. Fix update-motd.d permissions"
[[ -d "/var/cache/man" ]] && sudo chown man:root /var/cache/man -R && tolog "03. Fix man permissions"
[[ -d "/var/cache/man" ]] && sudo chmod g+s /var/cache/man -R && tolog "04. Fix man permissions"
[[ -f "/etc/sudoers" ]] && sudo chown root:root /etc/sudoers && tolog "05. Fix man permissions"
[[ -f "/etc/sudoers" ]] && sudo chmod 440 /etc/sudoers && tolog "06. Fix man permissions"
[[ -f "/usr/bin/sudo" ]] && sudo chown root:root /usr/bin/sudo && tolog "07. Fix sudo permissions"
[[ -f "/usr/bin/sudo" ]] && sudo chmod 4755 /usr/bin/sudo && tolog "08. Fix sudo permissions"
# Fix focal permissions
[[ -f "/usr/lib/sudo/sudoers.so" ]] && sudo chown 0 /usr/lib/sudo/sudoers.so && tolog "09. Fix sudoers.so permissions"
[[ -f "/usr/lib/sudo/sudoers.so" ]] && sudo chmod 644 /usr/lib/sudo/sudoers.so && tolog "10. Fix sudoers.so permissions"
[[ -f "/usr/lib/policykit-1/polkit-agent-helper-1" ]] && sudo chmod 4755 /usr/lib/policykit-1/polkit-agent-helper-1 && tolog "11. Fix polkit-agent-helper-1 permissions"
# Fix jammy permissions
[[ -f "/usr/libexec/sudo/sudoers.so" ]] && sudo chown 0 /usr/libexec/sudo/sudoers.so && tolog "12. Fix sudoers.so permissions"
[[ -f "/usr/libexec/sudo/sudoers.so" ]] && sudo chmod 644 /usr/libexec/sudo/sudoers.so && tolog "13. Fix sudoers.so permissions"
[[ -f "/usr/libexec/polkit-agent-helper-1" ]] && sudo chmod 4755 /usr/libexec/polkit-agent-helper-1 && tolog "14. Fix polkit-agent-helper-1 permissions"

# ===== B. Start removing useless packages and scripts =====

# Remove packages
sudo apt-get clean -y && sudo rm -rf /var/cache/apt/* && sudo rm -rf /var/lib/apt/* && tolog "20. Clean up local installation packages"
[[ -n "$(dpkg -l | awk '{print $2}' | grep linux-image-*)" ]] && sudo apt-get remove -qq --purge -y linux-image-* && tolog "21. Remove linux-image-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep linux-dtb-*)" ]] && sudo apt-get remove -qq --purge -y linux-dtb-* && tolog "22. Remove linux-dtb-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep linux-u-boot-*)" ]] && sudo apt-get remove -qq --purge -y linux-u-boot-* && tolog "23. Remove linux-u-boot-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep armbian-bsp-cli-*)" ]] && sudo apt-mark hold armbian-bsp-cli-* && tolog "24. Hold armbian-bsp-cli-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep u-boot-tools)" ]] && sudo apt-mark hold u-boot-tools && tolog "25. Hold u-boot-tools"
[[ -n "$(dpkg -l | awk '{print $2}' | grep sunxi-tools)" ]] && sudo apt-mark hold sunxi-tools && tolog "26. Hold sunxi-tools"
[[ -n "$(dpkg -l | awk '{print $2}' | grep initramfs-tools*)" ]] && sudo apt-mark hold initramfs-tools* && tolog "27. Hold initramfs-tools*"

# Remove the scripts contained in [ armbian-bsp-cli-odroidn2 ] that will cause the system to fail to start
# [ dpkg -c armbian-bsp-cli-odroidn2_23.02.2_arm64.deb ] : https://paste.armbian.com/aloxuvokol
# Move /usr/share/armbian to armbian.bak. [ dpkg -S boot.cmd ] : [ armbian-bsp-cli-odroidn2: /usr/share/armbian/boot.cmd ]
[[ -d "/usr/share/armbian" ]] && mv -f /usr/share/armbian /usr/share/armbian.bak && tolog "28. Move /usr/share/armbian to .bak"
# Move /usr/lib/nand-sata-install to nand-sata-install.bak. [ Useless bootloader and u-boot ]
[[ -d "/usr/lib/nand-sata-install" ]] && mv -f /usr/lib/nand-sata-install /usr/lib/nand-sata-install.bak && tolog "29. Move /usr/lib/nand-sata-install to .bak"
# Disable update_initramfs
initramfs_conf="/etc/initramfs-tools/update-initramfs.conf"
[[ -f "${initramfs_conf}" ]] && sed -i "s|^update_initramfs=.*|update_initramfs=no|g" ${initramfs_conf} && tolog "30. Set update-initramfs.conf"

# ===== C. Start disabling system services =====

# Regenerate new machine-id
sudo rm -f /etc/machine-id /var/lib/dbus/machine-id && tolog "50. Delete machine-id"
sudo dbus-uuidgen --ensure=/etc/machine-id && tolog "51. Generate /etc/machine-id"
sudo dbus-uuidgen --ensure && tolog "52. Generate /var/lib/dbus/machine-id"

# Turn off automatic hibernation to prevent hard drives from hanging
sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target && tolog "53. Turn off automatic sleep mode"

# Disable tips of the day for [ /etc/update-motd.d/35-armbian-tips ]
motd_tips="/etc/default/armbian-motd"
[[ -f "${motd_tips}" ]] && {
    sed -i 's|^MOTD_DISABLE=""|MOTD_DISABLE="tips"|g' ${motd_tips}
    tolog "54. Disable tips of the day"
}
quotes_cron="/etc/cron.weekly/armbian-quotes"
[[ -f "${quotes_cron}" ]] && {
    sed -i "s|^curl |#curl |g" ${quotes_cron}
    tolog "55. Disable quotes cron plan"
}

# Remove motd-news service
motd_timer="/usr/lib/systemd/system/motd-news.timer"
[[ -f "${motd_timer}" ]] && {
    sudo systemctl stop motd-news.timer
    sudo systemctl disable motd-news.timer
    sudo rm -f ${motd_timer}
    tolog "56. Disable motd-news.timer"
}
motd_service="/usr/lib/systemd/system/motd-news.service"
[[ -f "${motd_service}" ]] && {
    sudo systemctl stop motd-news.service
    sudo systemctl disable motd-news.service
    sudo rm -f ${motd_service}
    tolog "57. Disable motd-news.service"
}
sudo rm -f /var/lib/systemd/deb-systemd-helper-enabled/timers.target.wants/motd-news.timer
sudo rm -f /var/lib/systemd/deb-systemd-helper-enabled/motd-news.timer.dsh-also
sudo rm -f /etc/systemd/system/timers.target.wants/motd-news.timer
sudo rm -f /etc/update-motd.d/50-motd-news

# Disable the system's partition adjustment service
sudo systemctl stop armbian-resize-filesystem.service 2>/dev/null
sudo systemctl disable armbian-resize-filesystem.service 2>/dev/null
tolog "58. Disable the armbian-resize-filesystem.service"

# Disable the ssh.socket: https://github.com/Lemon1151/rk33xx-armbian/discussions/1476
sudo systemctl disable --now ssh.socket 2>/dev/null
sudo systemctl enable --now ssh.service 2>/dev/null
tolog "59. Disable the ssh.socket and enable ssh.service"

# ===== D. Start adjusting custom settings =====

# Fix version differences(After 2022.12.03)
[[ -f "/etc/amlogic_model_database.conf" ]] && {
    mv -f /etc/amlogic_model_database.conf /etc/model_database.conf
    tolog "70. Adjust the model_database.conf file name"
}
[[ -f "/etc/rockchip_model_database.conf" ]] && {
    mv -f /etc/rockchip_model_database.conf /etc/model_database.conf
    tolog "71. Adjust the model_database.conf file name"
}

# Confirm device information
[[ -f "${Lemon1151_release_file}" ]] && {
    # Get welcome banner value
    family_name="$(cat ${Lemon1151_release_file} | grep -E "^FAMILY=" | cut -d"'" -f2)"
    platform_name="$(cat ${Lemon1151_release_file} | grep -E "^PLATFORM=" | cut -d"'" -f2)"
    soc_name="$(cat ${Lemon1151_release_file} | grep -E "^SOC=" | cut -d"'" -f2 | sed -e "s|\b[a-z]|\U&|g")"
    board_name="$(cat ${Lemon1151_release_file} | grep -E "^BOARD=" | cut -d"'" -f2 | sed -e "s|\b[a-z]|\U&|g")"

    # Adjustment parameter name for ANDROID_UBOOT
    [[ -n "$(cat ${Lemon1151_release_file} | grep -E "^ANDROID_UBOOT=")" ]] && {
        sed -i "s|^ANDROID_UBOOT=|BOOTLOADER_IMG=|g" ${Lemon1151_release_file}
        tolog "80. Adjust the ANDROID_UBOOT name"
    }

    # Adjustment parameter name for UBOOT_STATUS
    [[ -n "$(cat ${Lemon1151_release_file} | grep -E "^UBOOT_STATUS=")" ]] && {
        sed -i "s|^UBOOT_STATUS=|MLUBOOT_STATUS=|g" ${Lemon1151_release_file}
        tolog "81. Adjust the UBOOT_STATUS name"
    }

    # Add default kernel tags
    sed -i "s|^KERNEL_BRANCH=|KERNEL_TAGS=|g" ${Lemon1151_release_file}
    sed -i "s|^KERNEL_TAGS='6.x.y'|KERNEL_TAGS='6.1.y'|g" ${Lemon1151_release_file}
    [[ -n "$(cat ${Lemon1151_release_file} | grep -E "^KERNEL_TAGS=")" ]] || {
        [[ "${soc_name,,}" == "rk3588" ]] && KERNEL_TAGS="rk3588" || KERNEL_TAGS="stable"
        echo "KERNEL_TAGS='${KERNEL_TAGS}'" >>${Lemon1151_release_file}
        tolog "82. Add the KERNEL_TAGS name"
    }

    # Add default KERNEL_REPO (Kernel download repository)
    [[ -n "$(cat ${Lemon1151_release_file} | grep -E "^KERNEL_REPO=")" ]] || {
        echo "KERNEL_REPO='Lemon1151/kernel'" >>${Lemon1151_release_file}
        tolog "83. Add the custom KERNEL_REPO URL"
    }

    # Add default KERNEL_BACKUP (Automatic backup kernel)
    [[ -n "$(cat ${Lemon1151_release_file} | grep -E "^KERNEL_BACKUP=")" ]] || {
        echo "KERNEL_BACKUP='yes'" >>${Lemon1151_release_file}
        tolog "84. Add the custom KERNEL_BACKUP"
    }

    # Get the board name
    [[ "${platform_name}" == "amlogic" ]] && bd_name="Aml.${soc_name}"
    [[ "${platform_name}" == "rockchip" ]] && bd_name="RK.${board_name}"
    [[ "${platform_name}" == "allwinner" ]] && bd_name="AW.${board_name}"

    # Adjust custom release information
    [[ -f "${armbian_release_file}" ]] && {
        [[ -n "${bd_name}" ]] && {
            sed -i "s|^BOARD=.*|BOARD=\"${board_name}\"|g" ${armbian_release_file}
            sed -i "s|^BOARD_NAME=.*|BOARD_NAME=\"${bd_name}\"|g" ${armbian_release_file}
        }

        short_version="$(cat ${armbian_release_file} | grep -E '^VERSION=' | grep -oE '[2-9][0-9]\.[0-9]{1,2}\.[0-9]{1,2}' | head -n 1)"
        [[ -n "${short_version}" ]] && {
            sed -i "s|^VERSION=.*|VERSION=\"${short_version}\"|g" ${armbian_release_file}
            sed -i "s|^REVISION=.*|REVISION=\"${short_version}\"|g" ${armbian_release_file}
        }

        sed -i "s|^BOARDFAMILY=.*|BOARDFAMILY=\"${family_name}\"|g" ${armbian_release_file}
        sed -i "s|^LINUXFAMILY=.*|LINUXFAMILY=\"${platform_name}\"|g" ${armbian_release_file}
        sed -i "s|^VENDOR=.*|VENDOR=\"Armbian OS\"|g" ${armbian_release_file}
        sed -i "s|^IMAGE_TYPE=.*|IMAGE_TYPE=rebuild|g" ${armbian_release_file}
        sed -i "s|^BOARD_TYPE=.*|BOARD_TYPE=diy|g" ${armbian_release_file}
        sed -i "s|^FORCE_BOOTSCRIPT_UPDATE=.*|FORCE_BOOTSCRIPT_UPDATE=\"no\"|g" ${armbian_release_file}
        sed -i "s|^BOOTSCRIPT_FORCE_UPDATE=.*|BOOTSCRIPT_FORCE_UPDATE=\"no\"|g" ${armbian_release_file}
        tolog "85. Adjust custom board name: ${armbian_release_file}"
    }

    # Adjust custom image information
    [[ -f "${armbian_image_file}" ]] && {
        [[ -n "${bd_name}" ]] && {
            sed -i "s|^BOARD=.*|BOARD=\"${board_name}\"|g" ${armbian_image_file}
            sed -i "s|^BOARD_NAME=.*|BOARD_NAME=\"${bd_name}\"|g" ${armbian_image_file}
        }

        short_version="$(cat ${armbian_image_file} | grep -E '^VERSION=' | grep -oE '[2-9][0-9]\.[0-9]{1,2}\.[0-9]{1,2}' | head -n 1)"
        [[ -n "${short_version}" ]] && {
            sed -i "s|^VERSION=.*|VERSION=\"${short_version}\"|g" ${armbian_image_file}
            sed -i "s|^REVISION=.*|REVISION=\"${short_version}\"|g" ${armbian_image_file}
        }

        sed -i "s|^BOARDFAMILY=.*|BOARDFAMILY=\"${family_name}\"|g" ${armbian_image_file}
        sed -i "s|^LINUXFAMILY=.*|LINUXFAMILY=\"${platform_name}\"|g" ${armbian_image_file}
        sed -i "s|^VENDOR=.*|VENDOR=\"Armbian OS\"|g" ${armbian_image_file}
        sed -i "s|^IMAGE_TYPE=.*|IMAGE_TYPE=rebuild|g" ${armbian_image_file}
        sed -i "s|^BOARD_TYPE=.*|BOARD_TYPE=diy|g" ${armbian_image_file}
        sed -i "s|^FORCE_BOOTSCRIPT_UPDATE=.*|FORCE_BOOTSCRIPT_UPDATE=\"no\"|g" ${armbian_image_file}
        sed -i "s|^BOOTSCRIPT_FORCE_UPDATE=.*|BOOTSCRIPT_FORCE_UPDATE=\"no\"|g" ${armbian_image_file}
        tolog "86. Adjust custom board name: ${armbian_image_file}"
    }

    # Disable ttyFIQ0 & ttyAML0 (ttyS2)
    [[ "${platform_name}" != "amlogic" ]] && {
        sudo systemctl disable serial-getty@ttyFIQ0 2>/dev/null
        sudo systemctl disable serial-getty@ttyAML0 2>/dev/null
        tolog "87. Disable ttyFIQ0 & ttyAML0 (ttyS2)"
    }
}

# Set system status to supported
[[ -n "${DISTRIBUTION_CODENAME}" && -f "${armbian_os_status}" ]] && {
    sed -i "s|^${DISTRIBUTION_CODENAME}=.*|${DISTRIBUTION_CODENAME}=supported|g" ${armbian_os_status}
    tolog "90. Set the ${DISTRIBUTION_CODENAME} system status to support"
}

# Maximize root partition size
todo_rootfs_resize="/root/.no_rootfs_resize"
[[ -f "${todo_rootfs_resize}" && "$(cat ${todo_rootfs_resize} 2>/dev/null | xargs)" == "yes" ]] && {
    armbian-tf 2>/dev/null &&
        tolog "91. Root partition resized successfully..."
}

# Show end message
tolog "successfully fixed."
